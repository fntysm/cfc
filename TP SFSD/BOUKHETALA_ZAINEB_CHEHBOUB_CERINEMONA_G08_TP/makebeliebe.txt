#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define TailleBLC 256
#define Max_enreg 20
#define b 3
#define MatMax 16
#define MAX 50
#define TL 9
#define TC 6
#define TID 6
#define TNP 25

/**dÃ©claration des structures**/
typedef struct Tbloc
{
	char chaine[TailleBLC];
}	Tbloc ;

typedef struct TEnreg
{
    char longEnreg[TL];
    char numID[TID];
    char classID[TC];
    char NomPrenom[TNP];
    char genre;
    char Teff;
    char tabNotes[MatMax];
}   Enreg;

typedef struct Entete
{
    int adr_dernier_bloc;
    int nbr_enreg;
    int indice_libre;
    int nb_sup;
}Entete;

typedef struct TOVC
{
    FILE *F;
    Entete entete;
}	TOVC;

/**machine abstraite**/
TOVC *ouvrir(char *filename,char mod) // mod = 'A' ancien (rb+) || mod = 'N' nouveau (wb+)
{
    TOVC *I = malloc(sizeof(TOVC));
    char s[3];
    if ((mod == 'A') || (mod =='a')) sprintf(s,"rb+");
    else sprintf(s,"wb+");
    I->F=fopen(filename,s);
    if ((mod == 'A') || (mod =='a'))
    {
        fread(&(I->entete),sizeof(Entete),1,I->F);
    }
    else
    {
        (I->entete).adr_dernier_bloc=0;
        (I->entete).nbr_enreg=0;
        (I->entete).indice_libre=0;
        (I->entete).nb_sup=0;
        fwrite(&(I->entete),sizeof(Entete),1,I->F);
    }
    return I;
}
void fermer(TOVC * pF)
{
    rewind(pF->F);
    fwrite(&(pF->entete),sizeof(Entete),1,pF->F);
    fclose(pF->F);
}
int entete(TOVC *pF,int i)
{
    if (i==1) return ((pF->entete).adr_dernier_bloc);
    if (i==2) return ((pF->entete).nbr_enreg);
    if (i==4) return ((pF->entete).nb_sup);
    return ((pF->entete).indice_libre);
}
void aff_entete(TOVC *pF,int i,int val)
{
    if (i==1) (pF->entete).adr_dernier_bloc=val;
    else if (i==2) (pF->entete).nbr_enreg=val;
    else if (i==4) (pF->entete).nb_sup=val;
    else (pF->entete).indice_libre=val;
}

void liredir(TOVC *pF,int i,Tbloc *buf)
{
    if (i<=entete(pF,1))
    {
        fseek(pF->F,sizeof(Entete)+(i-1)*sizeof(Tbloc),SEEK_SET);
        fread(buf,sizeof(Tbloc),1,pF->F);
    }
}

void ecriredir(TOVC *pF,int i,Tbloc *buf)
{
    fseek(pF->F, sizeof(Entete) + sizeof(Tbloc) * (i - 1), SEEK_SET);
    fwrite(buf, sizeof(Tbloc), 1, pF->F);
}
int alloc_bloc(TOVC *pF)
{
    aff_entete(pF,1,entete(pF,1)+1);
    return entete(pF,1);
}
// read a specific line from a file
void readLine(char fileName[MAX/2], int lineNum, char buffer[MAX]){
    FILE *fH;
    int lines = 0;
    fH = fopen(fileName, "r");
    if (fH == NULL){
            printf("\nINEXISTANT FILE\n");
            return;
    };
    while(!(feof(fH)) && (lines<=lineNum)){
        lines++;
        fscanf(fH, "%s", buffer);
        //fgets(buffer, MAX, fH);
    };
    fclose(fH);
}
Tbloc ecrire_chaine(TOVC* fichier, char chaine[256], int longu){
     Tbloc buf;
     int i = entete(fichier,1);
     int j = entete(fichier,3);
       for(int k=0;k<longu;k++)
        {
        if(j<TailleBLC)
        {
           buf.chaine[j]=chaine[k];
           j++;
        }
        else{
        ecriredir(fichier,i,&buf);
        alloc_bloc(fichier);
        i++;
        buf.chaine[0]=chaine[k];
        j=1;
        }
        }
    aff_entete(fichier,1,i);
    aff_entete(fichier,3,j);
    ecriredir(fichier,i,&buf);
    return buf;
}
Tbloc ecrire_char(TOVC* fichier, char c){
     Tbloc buf;
     int i = entete(fichier,1);
     int j = entete(fichier,3);

        if((j)<TailleBLC)
        {
           buf.chaine[j]=c;
           j++;
        }
        else{
        ecriredir(fichier,i,&buf);
        alloc_bloc(fichier);
        i++;
        buf.chaine[0]=c;
        j=1;
        }
    aff_entete(fichier,1,i);
    aff_entete(fichier,3,j);
    ecriredir(fichier,i,&buf);
    return buf;
}
void ecrire_enreg(TOVC* fichier, Enreg e, int *i, int *j){
    int l,k;
    Tbloc buff;
    printf("\ne.long: %s",e.longEnreg);
    ecrire_chaine(fichier,e.longEnreg,strlen(e.longEnreg),i,j);
    printf("\ne.ID: %s",e.numID);
    ecrire_chaine(fichier,e.numID,4,i,j);
    printf("\non va inserer classid: %s",e.classID);
    ecrire_chaine(fichier,e.classID,2,i,j);
    printf("\ne.Teff: %c",e.Teff);
    ecrire_char(fichier,e.Teff,i,j);
    printf("\ne.name: %s",e.NomPrenom);
    ecrire_chaine(fichier,e.NomPrenom,strlen(e.NomPrenom),i,j);
    printf("\ne.genre: %c",e.genre);
    ecrire_char(fichier,e.genre,i,j);
    ecrire_chaine(fichier,e.tabNotes,strlen(e.tabNotes),i,j);
}
TOVC* insertion(TOVC* fichier){
    int *i,*j;
    char nom[TNP];
    char prenom[TNP];
    int l;
    char longueur[TL];
    Enreg e;
    printf("\nveuillez inserer: \nl'identifiant: "); scanf("%s",&e.numID);
    printf("\nle nom: "); scanf("%s",&e.NomPrenom);
    printf(", le genre: "); scanf(" %c",&e.genre);
    printf("\nla cle: "); scanf("%s",&e.classID);
    printf("\nle tableau des notes: A20I20M20T20S20: "); scanf("%s",&e.tabNotes);
    e.Teff = '0';
    l = strlen(e.NomPrenom)+strlen(e.tabNotes)+4+2+1+1;
    sprintf(longueur,"%d", l);
    strcpy(e.longEnreg,longueur);
    // recherche() sinon
    i = entete(fichier,1);
    j = entete(fichier,3);
    ecrire_enreg(fichier,e,&i,&j);
    return fichier;
}

int main()
{
    TOVC *fichier;
    Tbloc buf;
    fichier = ouvrir("fichierlol",'N');
    fichier = insertion(fichier);
    printf("\non a termine l'insertion et j: %d",entete(fichier,3));
    fermer(fichier);
    TOVC *fichier1;
    fichier1 = ouvrir("fichierlol",'A');
    liredir(fichier1,0,&buf);
    printf("\non va lire le buffer:");
    for(int i=0;i<TailleBLC;i++)
    {
        printf("%c",buf.chaine[i]);
    }
    fermer(fichier1);
    return 0;
}
